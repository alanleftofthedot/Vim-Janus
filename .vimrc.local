" Use pathogen:
call pathogen#infect()
filetype plugin indent on


color default                   " add in colorscheme
set background=dark             " Default to a dark background for themes
set noincsearch                 " turn off Janus's incremental search
set ts=4 sts=4 sw=4 expandtab   " 4 tab spaces
set visualbell                  " don't beep
set noerrorbells                " don't beep

" set the leader key
let mapleader = ","
noremap <leader>e :NERDTreeToggle<CR>
noremap <leader>/ :NERDCommenterToggle

" f5 brings up buffer list
nnoremap <F5> :buffers<CR>:buffer<Space>

" lusty juggler with \l
noremap <leader>l :LustyJuggler<cr>

" switch quickly from window to window and maximize the window with ^j and ^k
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_ 

" set the tab top bar
set showtabline=2

" move tabs to the end for new, single buffers (exclude splits)
autocmd BufNew * if winnr('$') == 1 | tabmove99 | endif

" Nerdtree settings
" let NERDTreeQuitOnOpen = 0

nnoremap <Leader>d :let NERDTreeQuitOnOpen = 1<bar>NERDTreeToggle<CR>
nnoremap <Leader>D :let NERDTreeQuitOnOpen = 0<bar>NERDTreeToggle<CR>

" New tab
map  <C-l> :tabn<CR>
map  <C-h> :tabp<CR>

" Quit if nerdtree is the last buffer
function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
"                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction
autocmd WinEnter * call NERDTreeQuit()

set autoindent

" " Statusline setup
" " statusline
" " cf the default statusline: %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
" " format markers:
" "   %< truncation point
" "   %n buffer number
" "   %f relative path to file
" "   %m modified flag [+] (modified), [-] (unmodifiable) or nothing
" "   %r readonly flag [RO]
" "   %y filetype [ruby]
" "   %= split point for left and right justification
" "   %-35. width specification
" "   %l current line number
" "   %L number of lines in buffer
" "   %c current column number
" "   %V current virtual column number (-n), if different from %c
" "   %P percentage through buffer
" "   %) end of width specification
" " set statusline=%<\ %n:%f\ %m%r%y%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)
" 
" 
" set statusline =\ %n\ %*            "buffer number
" 
" set statusline +=%{&ff}%*            "file format
" set statusline +=%y%*                "file type
" " set statusline +=%F%m%r%h%w
" 
" set statusline +=\ %<%F%*            "full path
" set statusline +=%m%*                "modified flag
" 
" set statusline +=\ %{fugitive#statusline()}
" set statusline +=%=
" "set statusline+=TYPE:%y\ 
" "set statusline+=FMT:%{&ff}\ 
" "set statusline+=ASCII:\%03.3b\ 
" "set statusline+=HEX:\%02.2B\ 
" "set statusline+=L:%05l/%L\ 
" set statusline +=%4v\ %*             "virtual column number
" set statusline +=%=%5l%*             "current line
" set statusline +=/%L%*\                "total lines
" set statusline +=%p%%\ 
" 
" 
" "hi User1 guifg=#eea040 guibg=#222222
" "hi User2 guifg=#dd3333 guibg=#222222
" "hi User3 guifg=#ff66ff guibg=#222222
" "hi User4 guifg=#a0ee40 guibg=#222222
" "hi User5 guifg=#eeee40 guibg=#222222
" Removed above from vim-powerline

set laststatus=2
let g:Powerline_symbols = 'fancy'

" relative numbers and shortcut
set ruler
" Toggle line number mode.
function! g:ToggleNuMode()
    if(&rnu == 1)
        set nu
    else
        set rnu
    endif
endfunc
nnoremap <C-I> :call g:ToggleNuMode()<cr>

" Load the hemisu theme for gui
"if &t_Co > 2 || has("gui_running")
"    syntax on
"    colorscheme hemisu
"endif

"Simple Window management
" http://www.agillo.net/simple-vim-window-management/
function! WinMove(key) 
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else 
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction
 
map <leader>h              :call WinMove('h')<cr>
map <leader>k              :call WinMove('k')<cr>
map <leader>l              :call WinMove('l')<cr>
map <leader>j              :call WinMove('j')<cr>

map <leader>wc :wincmd q<cr>
map <leader>wr <C-W>r

map <leader>H              :wincmd H<cr>
map <leader>K              :wincmd K<cr>
map <leader>L              :wincmd L<cr>
map <leader>J              :wincmd J<cr>

" nmap <left>  :3wincmd <<cr>
" nmap <right> :3wincmd ><cr>
" nmap <up>    :3wincmd +<cr>
" nmap <down>  :3wincmd -<cr>

" Reselect visual block after indent:
" vnoremap < <gv 
" vnoremap > >gv 

" Make Y behave like other capitals
nnoremap Y y$

" Force Saving Files that Require Root Permission
cmap w!! %!sudo tee > /dev/null %

" Set formatting to use par
set formatprg=par

" move a line of text using ALT+[jk], indent with ALT+[hl]
" nnoremap <A-j> :m+<CR>==
" nnoremap <A-k> :m-2<CR>==
" nnoremap <A-h> <<
" nnoremap <A-l> >>
" inoremap <A-j> <Esc>:m+<CR>==gi
" inoremap <A-k> <Esc>:m-2<CR>==gi
" inoremap <A-h> <Esc><<`]a
" inoremap <A-l> <Esc>>>`]a
" vnoremap <A-j> :m'>+<CR>gv=gv
" vnoremap <A-k> :m-2<CR>gv=gv
" vnoremap <A-h> <gv
" vnoremap <A-l> >gv
set textwidth=0

" Hide files that vim won't open for controlp
let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

if has("unix")
    let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps
endif

let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

" CTags functions
set tags=./tags,./../tags,./../../tags,./*/tags,/var/www/haven/tags
let Tlist_Ctags_Cmd="/usr/bin/ctags"
let Tlist_WinWidth=50
map <F4> :TlistToggle<cr>
map <F8> :!/usr/bin/ctags -f /var/www/haven/tags -h ".php" -R --exclude="\.git" --totals=yes --tag-relative=yes --PHP-kinds=+cf --regex-PHP='/abstract class ([^ ]*)/\1/c/' --regex-PHP='/interface ([^ ]*)/\1/c/' --regex-PHP='/(public \|static \|abstract \|protected \|private )+function ([^ (]*)/\1/f/'<cr>
" set the names of flags
let tlist_php_settings = 'php;c:class;f:function;d:constant'
" close all folds except for current file
let Tlist_File_Fold_Auto_Close = 1
" make tlist pane active when opened
let Tlist_GainFocus_On_ToggleOpen = 1
" width of window
let Tlist_WinWidth = 40
" close tlist when a selection is made
let Tlist_Close_On_Select = 1


" c-\ open the definition in a new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" alt-] open the definition in a verticle slit
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" omni completion
filetype plugin on
set ofu=syntaxcomplete#Complete
"let g:neocomplcache_enable_at_startup = 1

" map  gq :diffoffh:q
" map  gg :Gdiff

set autoindent
set smartindent
set smarttab

" open ctrl-p files in a tab if you hit t or e
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ }
